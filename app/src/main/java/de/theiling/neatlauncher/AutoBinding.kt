// Autogenerated by mkresource.pl, do not edit
@file:Suppress("MemberVisibilityCanBePrivate")

package de.theiling.neatlauncher

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.CheckBox
import android.widget.EditText
import android.widget.FrameLayout
import android.widget.LinearLayout
import android.widget.RadioButton
import android.widget.TextView
import androidx.constraintlayout.widget.ConstraintLayout
import androidx.recyclerview.widget.RecyclerView

class ItemActionsBinding(
    val rootView: LinearLayout,
    val itemRename: TextView,
    val itemShortcuts: LinearLayout,
    val shortcutList: LinearLayout,
    val itemShow: TextView,
    val itemHide: TextView,
    val itemPin: TextView,
    val dialogTitle: TextView,
    val itemRemove: TextView,
    val itemInfo: TextView,
    val itemRid: TextView):
    ViewBinding
{
    override val root = rootView
    companion object {
        fun bind(rootView: View) = ItemActionsBinding(
            rootView as LinearLayout,
            rootView.findViewById(R.id.item_rename)!!,
            rootView.findViewById(R.id.item_shortcuts)!!,
            rootView.findViewById(R.id.shortcut_list)!!,
            rootView.findViewById(R.id.item_show)!!,
            rootView.findViewById(R.id.item_hide)!!,
            rootView.findViewById(R.id.item_pin)!!,
            rootView.findViewById(R.id.dialog_title)!!,
            rootView.findViewById(R.id.item_remove)!!,
            rootView.findViewById(R.id.item_info)!!,
            rootView.findViewById(R.id.item_rid)!!)

        fun inflate(
            inflater: LayoutInflater,
            parent: ViewGroup?,
            attachToParent: Boolean): ItemActionsBinding
        {
            val root = inflater.inflate(R.layout.item_actions, parent, false)
            if (attachToParent) parent?.addView(root)
            return bind(root)
        }

        @Suppress("unused")
        fun inflate(inflater: LayoutInflater) = inflate(inflater, null, false)
    }
}

class MainActivityBinding(
    val content: ConstraintLayout,
    val drawerRecycler: RecyclerView,
    val mainSearch: EditText,
    val mainHead: LinearLayout,
    val mainClockDigital: TextView,
    val mainTopMargin: View,
    val mainClockAnalog: NeatAnalogClock,
    val mainClockGrid: NeatGridClock,
    val mainClockWord: NeatWordClock,
    val homeRecycler: RecyclerView,
    val mainSearchOpt: TextView,
    val mainClockBox: LinearLayout,
    val mainDate: TextView):
    ViewBinding
{
    override val root = content
    companion object {
        fun bind(rootView: View) = MainActivityBinding(
            rootView as ConstraintLayout,
            rootView.findViewById(R.id.drawer_recycler)!!,
            rootView.findViewById(R.id.main_search)!!,
            rootView.findViewById(R.id.main_head)!!,
            rootView.findViewById(R.id.main_clock_digital)!!,
            rootView.findViewById(R.id.main_top_margin)!!,
            rootView.findViewById(R.id.main_clock_analog)!!,
            rootView.findViewById(R.id.main_clock_grid)!!,
            rootView.findViewById(R.id.main_clock_word)!!,
            rootView.findViewById(R.id.home_recycler)!!,
            rootView.findViewById(R.id.main_search_opt)!!,
            rootView.findViewById(R.id.main_clock_box)!!,
            rootView.findViewById(R.id.main_date)!!)

        fun inflate(
            inflater: LayoutInflater,
            parent: ViewGroup?,
            attachToParent: Boolean): MainActivityBinding
        {
            val root = inflater.inflate(R.layout.main_activity, parent, false)
            if (attachToParent) parent?.addView(root)
            return bind(root)
        }

        @Suppress("unused")
        fun inflate(inflater: LayoutInflater) = inflate(inflater, null, false)
    }
}

class MainOptDialogBinding(
    val rootView: LinearLayout,
    val colorChoice: TextView,
    val readContactList: CheckBox,
    val timeChoice: TextView,
    val dateChoice: TextView,
    val fontChoice: TextView):
    ViewBinding
{
    override val root = rootView
    companion object {
        fun bind(rootView: View) = MainOptDialogBinding(
            rootView as LinearLayout,
            rootView.findViewById(R.id.color_choice)!!,
            rootView.findViewById(R.id.read_contact_list)!!,
            rootView.findViewById(R.id.time_choice)!!,
            rootView.findViewById(R.id.date_choice)!!,
            rootView.findViewById(R.id.font_choice)!!)

        fun inflate(
            inflater: LayoutInflater,
            parent: ViewGroup?,
            attachToParent: Boolean): MainOptDialogBinding
        {
            val root = inflater.inflate(R.layout.main_opt_dialog, parent, false)
            if (attachToParent) parent?.addView(root)
            return bind(root)
        }

        @Suppress("unused")
        fun inflate(inflater: LayoutInflater) = inflate(inflater, null, false)
    }
}

class PinDialogBinding(
    val rootView: FrameLayout,
    val pinHome: CheckBox,
    val dialogTitle: TextView,
    val pinTime: CheckBox,
    val pinDown: CheckBox,
    val pinRight: CheckBox,
    val pinLeft: CheckBox,
    val pinDate: CheckBox):
    ViewBinding
{
    override val root = rootView
    companion object {
        fun bind(rootView: View) = PinDialogBinding(
            rootView as FrameLayout,
            rootView.findViewById(R.id.pin_home)!!,
            rootView.findViewById(R.id.dialog_title)!!,
            rootView.findViewById(R.id.pin_time)!!,
            rootView.findViewById(R.id.pin_down)!!,
            rootView.findViewById(R.id.pin_right)!!,
            rootView.findViewById(R.id.pin_left)!!,
            rootView.findViewById(R.id.pin_date)!!)

        fun inflate(
            inflater: LayoutInflater,
            parent: ViewGroup?,
            attachToParent: Boolean): PinDialogBinding
        {
            val root = inflater.inflate(R.layout.pin_dialog, parent, false)
            if (attachToParent) parent?.addView(root)
            return bind(root)
        }

        @Suppress("unused")
        fun inflate(inflater: LayoutInflater) = inflate(inflater, null, false)
    }
}

class PopupItemBinding(
    val rootView: FrameLayout,
    val itemName: TextView):
    ViewBinding
{
    override val root = rootView
    companion object {
        fun bind(rootView: View) = PopupItemBinding(
            rootView as FrameLayout,
            rootView.findViewById(R.id.item_name)!!)

        fun inflate(
            inflater: LayoutInflater,
            parent: ViewGroup?,
            attachToParent: Boolean): PopupItemBinding
        {
            val root = inflater.inflate(R.layout.popup_item, parent, false)
            if (attachToParent) parent?.addView(root)
            return bind(root)
        }

        @Suppress("unused")
        fun inflate(inflater: LayoutInflater) = inflate(inflater, null, false)
    }
}

class RenameDialogBinding(
    val rootView: FrameLayout,
    val editOrder: EditText,
    val editLabel: EditText):
    ViewBinding
{
    override val root = rootView
    companion object {
        fun bind(rootView: View) = RenameDialogBinding(
            rootView as FrameLayout,
            rootView.findViewById(R.id.edit_order)!!,
            rootView.findViewById(R.id.edit_label)!!)

        fun inflate(
            inflater: LayoutInflater,
            parent: ViewGroup?,
            attachToParent: Boolean): RenameDialogBinding
        {
            val root = inflater.inflate(R.layout.rename_dialog, parent, false)
            if (attachToParent) parent?.addView(root)
            return bind(root)
        }

        @Suppress("unused")
        fun inflate(inflater: LayoutInflater) = inflate(inflater, null, false)
    }
}

class SearchOptDialogBinding(
    val rootView: FrameLayout,
    val dialogList: LinearLayout):
    ViewBinding
{
    override val root = rootView
    companion object {
        fun bind(rootView: View) = SearchOptDialogBinding(
            rootView as FrameLayout,
            rootView.findViewById(R.id.dialog_list)!!)

        fun inflate(
            inflater: LayoutInflater,
            parent: ViewGroup?,
            attachToParent: Boolean): SearchOptDialogBinding
        {
            val root = inflater.inflate(R.layout.search_opt_dialog, parent, false)
            if (attachToParent) parent?.addView(root)
            return bind(root)
        }

        @Suppress("unused")
        fun inflate(inflater: LayoutInflater) = inflate(inflater, null, false)
    }
}

class SearchRenameDialogBinding(
    val rootView: FrameLayout,
    val editNew: RadioButton,
    val editName: EditText,
    val editUrl: EditText,
    val editDef: CheckBox,
    val editDel: RadioButton):
    ViewBinding
{
    override val root = rootView
    companion object {
        fun bind(rootView: View) = SearchRenameDialogBinding(
            rootView as FrameLayout,
            rootView.findViewById(R.id.edit_new)!!,
            rootView.findViewById(R.id.edit_name)!!,
            rootView.findViewById(R.id.edit_url)!!,
            rootView.findViewById(R.id.edit_def)!!,
            rootView.findViewById(R.id.edit_del)!!)

        fun inflate(
            inflater: LayoutInflater,
            parent: ViewGroup?,
            attachToParent: Boolean): SearchRenameDialogBinding
        {
            val root = inflater.inflate(R.layout.search_rename_dialog, parent, false)
            if (attachToParent) parent?.addView(root)
            return bind(root)
        }

        @Suppress("unused")
        fun inflate(inflater: LayoutInflater) = inflate(inflater, null, false)
    }
}

interface ViewBinding {
	val root: View
}
